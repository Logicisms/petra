//
//  Variables
//

$_petra: (
    global: (
        namespace: (
            prefix: (
                object:                 "o-",
                component:              "c-",
                utility:                "u-",
                scope:                  "s-",
                is:                     "is-",
                has:                    "has-",
                javascript:             "js-",
            ),
            delimiter: (
                element:                "__",
                modifier:               "--",
                responsive:             \@,
            ),
        ),
        z-index: (
            default:                1,
        ),
        typography: (
            //  browser context for font-size setting in the reset
            browser-context:        16px,
            
            local-path:             "../fonts",
            
            font-family: (
                sans-serif:             ("Helvetica", Helvetica, sans-serif),
                serif:                  ("Times New Roman", Times, serif),
                monospace:              (Monaco, Consolas, "Andale Mono", monospace),
            ),
        ),
    ),
    
    debug: (
        message: (
            lede:                   ("Invalid value(s):", "at mixin:"),
            on-warn:                "Follow backtrace or review rendered markup.",
            on-error:               "Follow backtrace and correct invalid syntax to unblock compiler.",
            
            project-settings:       "No '$settings' map found for this project.",
            
            default:                "mixin (no message defined)",
            respond-to:             "@include respond-to()",
        ),
        outline: (
            color:                  red,
            style:                  solid,
            width:                  0.5rem,
        ),
        flags: (
            //  warn/error flags for petra mixins using the debug utility
            //  set to 'true' to error out of a compile with incorrect syntax
            project-settings:       true,
            
            respond-to:             false,
        ),
    ),
    
    grid: (
        breakpoints: (
            small: (
                name:                   "small",
                shorthand:              "sm",
                query: (
                    max-width:          640px,
                ),
            ),
            medium: (
                name:                   "medium",
                shorthand:              "md",
                query: (
                    min-width:          641px,
                    max-width:          1023px,
                ),
            ),
            large: (
                name:                   "large",
                shorthand:              "lg",
                query: (
                    min-width:          1024px,
                ),
            ),
        ),
        //  toggle responsive shorthand for grid and utility classes
        breakpoint-shorthand:   false,
    )
);

@function _pathfinder($path...) {
    $list: ();
    $list: remove($path, nth($path, -1));
    
    $map: map-deep-get($_petra, $list...) !default;
    $key: nth($path, -1);
    
    @if variable-exists(settings) and type-of($settings) == map {
        $fallback: $map;
        $map: map-deep-get($settings, $list...);
        
        @if if(map-has-key($map, key), true, false) {
            @return map-deep-get($map, $key);
        } @else {
            @return map-deep-get($fallback, $key);
        }
    } @else {
        @if not variable-exists(settings) {
            @warn map-deep-get($_petra, debug, message, project-settings);
        }
        @return map-deep-get($map, $key);
    }
}
    //  increased-specificity _pathfinder aliases
    @function z($key) {
        @return _pathfinder(global, z-index, $key); }

    @function prefix($key) {
        @return _pathfinder(global, namespace, prefix, $key); }


$element:                   _pathfinder(global, namespace, delimiter, element);
$modifier:                  _pathfinder(global, namespace, delimiter, modifier);
$responsive:                _pathfinder(global, namespace, delimiter, responsive);

$browser-context:           _pathfinder(global, typography, browser-context);

