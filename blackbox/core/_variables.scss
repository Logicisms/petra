//
//  Variables
//
//  Fallback configuration map
$_petra: (
    debugging: (
        messages: (
            lede:                   ("Invalid value(s):", "at mixin:"),
            on-warn:                "Follow backtrace or review rendered markup.",
            on-error:               "Follow backtrace and correct invalid syntax to unblock compiler.",
            
            project-settings:       "No '$settings' map found for this project.",
            
            default:                "mixin (no message defined)",
            respond-to:             "@include respond-to()",
        ),
        outline: (
            color:                  red,
            style:                  solid,
            width:                  0.5rem,
        ),
        flags: (
            //  warn/error flags for petra mixins using the debug utility.
            //  set to 'true' to warn if no $settings map is declared.
            project-settings:       true,
            
            //  set to 'true' to error out of a compile with incorrect syntax.
            respond-to:             false,
        ),
    ),
    
    global: (
        reset: (
            browser-context:        16px,
        ),
        custom-properties: (
            //  css variables to be injected at the top of the document :root
            //  experimental, may be removed
            //  good test case for the feature flags
            foo:                    "bar",
        ),
        namespacing: (
            prefix: (
                object:                 "o-",
                component:              "c-",
                utility:                "u-",
                scope:                  "s-",
                is:                     "is-",
                has:                    "has-",
                hack:                   "\*\*",
                javascript:             "js-",
            ),
            delimiter: (
                element:                "__",
                modifier:               "--",
                responsive:             \@,
            ),
        ),
        z-index: (
            default:                1,
        ),
    ),
    
    typography: (
        font-families: (
            sans-serif:         ("Helvetica", Helvetica, sans-serif),
            serif:              ("Times New Roman", Times, serif),
            monospace:          (Monaco, Consolas, "Andale Mono", monospace),
        ),
        line-height:            1.75,
    ),
    
    grid: (
        breakpoints: (
            small: (
                max-width:          640px,
            ),
            medium: (
                min-width:          641px,
            ),
            large: (
                min-width:          1024px,
            ),
        ),
    ),
    
    features: (
        //  experimental feature flags
        //  toggle whether or not Petra outputs a CSS reset.
        reset-css:              true,
        
        //  toggle custom properties (CSS variables) inserted at document root.
        custom-properties:      true,
        
        //  toggle nested BEM namespacing; applies to element and modifier mixins.
        nested-bem:             true,
        
        //  toggle the output of responsive modifying classes for grids and utilities.
        responsive-modifiers:   true,
    ),
);


//
//  Config introspection functions
@function _pathfinder($path...) {
    $fallback: map-deep-get($_petra, $path...);
    
    @if variable-exists(settings) and type-of($settings) == map {
        $map: ();
        $keys: ();
        
        @for $i from 1 through length($path) {
            $key: nth($path, $i);
            
            @if $i > 1 {
                $map: if(
                    length($path) > 2,
                    $path,
                    append($map, nth($path, ($i - 1)), comma)
                );
                $map-get: map-deep-get($settings, $map...);
                
                @if map-has-key($map-get, $key) {
                    $keys: append($keys, $key, comma);
                } @else {
                    @return map-deep-get($fallback);
                }
            } @else {
                @if map-has-key($settings, $key) {
                    $keys: append($keys, $key, comma);
                } @else {
                    @return map-deep-get($fallback);
                } 
            }
        }
        @return map-deep-get($settings, $keys...);
    } @else {
        @if not variable-exists(settings) {
            @warn map-deep-get($_petra, debugging, messages, project-settings);
        }
        @return map-deep-get($fallback);
    }
}

@function _feature($flag) {
    @return _pathfinder(features, $flag);
}

//
//  $settings parsing functions
@function z($key) {
    @return _pathfinder(global, z-index, $key);
}

@function prefix($key) {
    @return _pathfinder(global, namespacing, prefix, $key);
}

@function font-family($stack) {
    @return _pathfinder(typography, font-families, $stack);
}

//
//  Parsed and aliased $settings variables
//  global
//  global, reset
$_browser-context:          _pathfinder(global, reset, browser-context);
 $browser-context:          $_browser-context !default;
//
//  global, namespacing
$_element:                  _pathfinder(global, namespacing, delimiter, element);
 $element:                  $_element !default;
$_modifier:                 _pathfinder(global, namespacing, delimiter, modifier);
 $modifier:                 $_modifier !default;
$_responsive:               _pathfinder(global, namespacing, delimiter, responsive);
 $responsive:               $_responsive !default;

//  grid
//  grid, breakpoints
$_breakpoints:              map-keys(_pathfinder(grid, breakpoints));
 $breakpoints:              $_breakpoints !default;

