//
//  Mixins
//
//  Prefix writing API
@mixin _prefix($prefix, $name) {
    .#{_pathfinder(global, namespacing, prefixes, $prefix) + $name} {
        @content;
    }
}
    @mixin class($prefix, $name) {
        @include _prefix($var, $i) { @content; }
    }

//
//  BEM writing API
@mixin _block {
    @if _feature(nested-bem) {
        &#{&} { @content; }
    } @else {
        & { @content; }
    }
}
    @mixin block {
        @include _block { @content; }
    }

@mixin _element($name) {
    @if _feature(nested-bem) {
        & &#{$_element + $name} { @content; }
    } @else {
        &#{$_element + $name} { @content; }
    }
}
    @mixin element($var) {
        @include _element($var) { @content; }
    }

@mixin _modifier($name) {
    &#{$_modifier + $name} { @content; }
}
    @mixin modifier($var) {
        @include _modifier($var) { @content; }
    }

//
//  Context simplifying API
@mixin qualify($selector) {
    @at-root #{$selector + &} { @content; }
}

@mixin descendant-of($selector) {
    #{$selector} & { @content; }
}

@mixin child-of($selector) {
    #{$selector} > & { @content; }
}

@mixin adjacent-sibling-of($selector) {
    #{$selector} + & { @content; }
}

@mixin general-sibling-of($selector) {
    #{$selector} ~ & { @content; }
}

//
//  Formatting
@mixin clearfix {
    &::after {
        clear:                  both;
        display:                block;
        
        content:                " ";
    }
}

@mixin align($position) {
    @if $position == "left" or $position == "right" {
        float:                  $position;
    } @else if $position == "center" {
        display:                block;
        float:                  none;
        margin: {
            right:              auto;
            left:               auto; }
    } @else {
        @include debug(_debug-message('align'), _debug-flag('align'), $position);
    }
}
.element {
    @include align(away);
}

