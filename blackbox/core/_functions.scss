//
//  Functions
//

//  Map functions

@function map-deep-get($map, $keys...) {
    //  an extension of the built in 'map-get()' by Hugo Giraudel
    //  https://css-tricks.com/snippets/sass/deep-getset-maps/
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@function map-deep-keys($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return map-keys($map);
}

@function deep-inspect($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return inspect($map);
}


//  List functions

@function remove($list, $value, $separator: auto, $recursive: false) {
    //  remove an entry from a list, by Hugo Giraudel, modified
    //  https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#removing-values-from-list
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, remove(nth($list, $i), $value, $recursive), $separator);
        }
        @else if nth($list, $i) != $value {
            $result: append($result, nth($list, $i), $separator);
        }
    }
    @return $result;
}


//  String functions

@function str-replace($string, $search, $replace: '') {
    //  replace `$search` with `$replace` in `$string`, by Hugo Giraudel
    //  https://css-tricks.com/snippets/sass/str-replace-function/
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}


//  Number functions

@function strip-unit($number) {
    //  strips css unit from any number value, by Hugo Giraudel
    //  https://css-tricks.com/snippets/sass/strip-unit-function/
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

@function replace-unit($number, $unit) {
    @if type-of($number) == "number" and not unitless($number) {
        @return strip-unit($number) + 0 + $unit;
    }
    @return $number;
}

@function rem($pixels) {
    @return (strip-unit($pixels) / 10) + 0rem;
}

@function em($pixels, $context: 16px) {
    @if unitless($pixels) {
        $pixels: $pixels + 0px;
    }
    @if unitless($context) {
        $context: $context + 0px;
    }
    @return ($pixels / $context) + 0em;
}


//  Color functions

@function blacken($color, $amount) {
    @return mix(black, $color, $amount);
}
    @function shade($color, $amount) {
        @return blacken($color, $amount);
    }

@function whiten($color, $amount) {
    @return mix(white, $color, $amount);
}
    @function tint($color, $amount) {
        @return whiten($color, $amount);
    }

