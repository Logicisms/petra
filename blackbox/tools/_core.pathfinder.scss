//
//  Pathfinder
//

@function _pathfinder($path...) {
    $fallback: map-deep-get($_petra, $path...);
    //@debug "START _pathfinder for $path terminating at '#{nth($path, -1)}'.";
    //@debug "- Checking for $settings map...";
    @if variable-exists(settings) and type-of($settings) == map {
        $length: length($path);
        $map: $settings;
        $keys: ();
        //@debug "-- $settings map found.";
        //@debug "-- Checking $settings for '#{$path}'...";
        //@debug "-- Determining search method...";
        @if $length > 1 {
            //@debug "--- $path length is #{$length}, performing search loop.";
            @for $i from 1 through $length {
                $key: nth($path, $i);
                //@debug "---- Starting loop #{$i}, for '#{$key}' in $path.";
                @if map-has-key($map, $key) {
                    //@debug "----- $settings has #{$key}.";
                    $keys: append($keys, $key);
                    $map: map-deep-get($settings, $keys...);
                } @else {
                    //@debug "----- $settings does not have '#{$key}'; falling back.";
                    //@debug "END _pathfinder for $path terminating at '#{nth($path, -1)}'.";
                    @return map-deep-get($fallback); // write up more @debug process descriptors
                }
            }
            //@debug "--- $settings has $path terminating at '#{nth($path, -1)}'.";
            //@debug "END _pathfinder for $path terminating at '#{nth($path, -1)}'.";
            @return map-deep-get($map);
        }
        $key: nth($path, 1);
        //@debug "--- $path length is #{$length}, performing direct conditional check.";
        //@debug "--- Checking $settings for #{$key}...";
        @if map-has-key($settings, $key) {
            //@debug "---- $settings has '#{$key}', returning path.";
            //@debug "END _pathfinder for $path terminating at '#{nth($path, -1)}'.";
            @return map-get($settings, $key);
        }
    } @else if not variable-exists(settings) {
        @warn map-deep-get($_petra, debugging, messages, project-settings);
    }
    @return map-deep-get($fallback);
}


//  Config introspection functions
@function _feature($flag) {
    @return _pathfinder(features, $flag);
}


//  Config parsing functions
@function z($key) {
    @return _pathfinder(global, z-index, $key);
}

@function prefix($key) {
    @return _pathfinder(global, namespacing, prefixes, $key);
}

@function font-stack($stack) {
    @return _pathfinder(typography, font-stacks, $stack);
}
@function font-size($size) {
    @return _pathfinder(typography, font-sizes, $size);
}


//  Parsed and aliased $settings variables
//  global, namespacing
$_element:                  _pathfinder(global, namespacing, delimiter, element);
 $element:                  $_element !default;
$_modifier:                 _pathfinder(global, namespacing, delimiter, modifier);
 $modifier:                 $_modifier !default;
$_responsive:               _pathfinder(global, namespacing, delimiter, responsive);
 $responsive:               $_responsive !default;

//  typography
$_browser-context:          _pathfinder(typography, browser-context);
 $browser-context:          $_browser-context !default;
$_font-family:              _pathfinder(typography, font-family);
 $font-family:              $_font-family !default;
$_line-height:              _pathfinder(typography, line-height);
 $line-height:              $_line-height !default;
//  @TODO: this could be more elegant, i think. revisit it later.
$_hx-i:                     _pathfinder(typography, hx-scale-increment);
$_heading-scales: (
    h1:                     1em + ($_hx-i * 5),
    h2:                     1em + ($_hx-i * 4),
    h3:                     1em + ($_hx-i * 3),
    h4:                     1em + ($_hx-i * 2),
    h5:                     1em + ($_hx-i * 1),
    h6:                     1em + ($_hx-i * 0),
);

//  layout
$_gutter: if(               _feature(type-based-grid),
                            ($_line-height + 0em),
                            _pathfinder(layout, gutter)
);
 $gutter:                   $_gutter;
//  layout, grid
$_grid-columns:             _pathfinder(layout, grid-columns);
 $grid-columns:             $_grid-columns;
//  layout, breakpoints
$_breakpoints:              map-keys(_pathfinder(layout, breakpoints));
 $breakpoints:              $_breakpoints !default;

