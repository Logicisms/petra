//
//  Mixins, formatting
//

//  Positioning
@mixin position-absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
    position:               absolute;
        top:                $top;
        right:              $right;
        bottom:             $bottom;
        left:               $left;
}

@mixin position-center($x: true, $y: true) {
    position:               absolute;
    @if ($x and $y) {
        top:                    50%;
        left:                   50%;
        transform:              translate(-50%, -50%);
    } @else if $x {
        left:                   50%;
        transform:              translateX(-50%);
    } @else if $y {
        top:                    50%;
        transform:              translateY(-50%);
    }
}

@mixin float($position, $important: false) {
    @if ($position == "left") or ($position == "right") {
        float:                  $position if($important, !important, null);
    } @else if $position == "center" {
        display:                block if($important, !important, null);
        float:                  none if($important, !important, null);
        margin: {
            right:              auto if($important, !important, null);
            left:               auto if($important, !important, null); }
    } @else {
        @include debug(
            "@include float()",
            $value: $position,
            $valid-arguments: "'left', 'right', 'center'"
        );
    }
}


//  Vertical flow
@mixin clearfix {
    &::after {
        clear:                  both;
        display:                block;
        
        content:                " ";
    }
}


//  Visibility
@mixin null($var: false) {
    @if $var {
        @if $var == "print" {
            @media print {
                display:                none !important;
            }
        } @else if $var == "visual" {
            position:				absolute;
                left:       		-200vw;
            
            margin:					-1px;
            overflow:				hidden;
            padding:				0;
            width:					1px;
            height:					1px;

            clip:					rect(0, 0, 0, 0);
        } @else {
            @include debug(
                "@include null()",
                $value: $var,
                $valid-arguments: "'print', 'visual'"
            );
        }
    } @else {
        display:                none;
        visibility:             hidden;
    }
}


//  Misc
@mixin place-on-circle($item-count, $circle-size, $item-size) {
    //  by Hugo Giraudel
    //  https://css-tricks.com/snippets/sass/placing-items-circle/
    position:               relative;
    
    padding:                0;
    width:                  $circle-size;
    height:                 $circle-size;
    
    border-radius:          50%;
    
    list-style:             none;       

    
    > * {
        position:               absolute;
            top:                50%; 
            left:               50%;
        
        display:                block;
        margin:                 -($item-size / 2);
        width:                  $item-size;
        height:                 $item-size;

        $angle:                 (360 / $item-count);
        $rot:                   0;

        @for $i from 1 through $item-count {
            &:nth-of-type(#{$i}) {
                transform: 
                    rotate($rot * 1deg) 
                    translate($circle-size / 2) 
                    rotate($rot * -1deg);
            }

            $rot: $rot + $angle;
        }
    }
}

