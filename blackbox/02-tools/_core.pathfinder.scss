//
//  Pathfinder
//

$_debug-pathfinder: false;

@function _pathfinder($path...) {
    @if $_debug-pathfinder {
        @debug "START _pathfinder for $path terminating at '#{nth($path, -1)}'.";
        @debug "- Checking for $settings map..."; }
    
    @if variable-exists(settings) and type-of($settings) == map {
        $length: length($path);
        $map: $settings;
        $keys: ();
        
        @if $_debug-pathfinder {
            @debug "-- $settings map found.";
            @debug "-- Checking $settings for '#{$path}' and determining search method..."; }
        
        @if $length > 1 {
            @if $_debug-pathfinder {
                @debug "--- $path length is #{$length}, performing search loop."; }
            
            @for $i from 1 through $length {
                $key: nth($path, $i);
                
                @if $_debug-pathfinder {
                    @debug "---- Starting loop #{$i}, for '#{$key}' in $path."; }
                
                @if map-has-key($map, $key) {
                    @if $_debug-pathfinder {
                        @debug "----- $settings has '#{$key}'."; }
                    
                    $keys: append($keys, $key);
                    $map: map-deep-get($settings, $keys...);
                } @else {
                    @if $_debug-pathfinder {
                        @debug "----- $settings does not have '#{$key}'; falling back.";
                        @debug "END _pathfinder for $path terminating at '#{nth($path, -1)}'."; }
                    
                    @return map-deep-get($_petra, $path...); // write up more @debug process descriptors
                }
            }
            
            @if $_debug-pathfinder {
                @debug "----- $settings has $path terminating at '#{nth($path, -1)}'.";
                @debug "END _pathfinder for $path terminating at '#{nth($path, -1)}'."; }
            
            @return map-deep-get($map);
        }
        $key: nth($path, 1);
        
        @if $_debug-pathfinder {
            @debug "--- $path length is #{$length}, performing direct conditional check.";
            @debug "--- Checking $settings for #{$key}..."; }
        
        @if map-has-key($settings, $key) {
            @if $_debug-pathfinder {
                @debug "---- $settings has '#{$key}'.";
                @debug "END _pathfinder for $path terminating at '#{nth($path, -1)}'."; }
            
            @return map-get($settings, $key);
        }
    } @else if not variable-exists(settings) {
        @if $_debug-pathfinder {
            @debug "- $settings map not found; falling back."; }
        
        @warn map-deep-get($_petra, debugging, messages, project-settings);
    }
    @return map-deep-get($_petra, $path...);
}

@function config($setting...) {
    @return _pathfinder($setting...);
}


//  Config introspection functions
@function _feature($flag) {
    @return _pathfinder(features, $flag);
}


//  Config parsing functions
@function z($key) {
    @return _pathfinder(layout, z-indices, $key);
}

@function prefix($key) {
    @return _pathfinder(namespacing, prefixes, $key);
}

@function font-face($face) {
    @return _pathfinder(typography, font-faces, $face);
}
@function font-stack($stack) {
    @return _pathfinder(typography, font-stacks, $stack);
}
@function font-size($size) {
    @return _pathfinder(typography, font-sizes, $size);
}

@function column($index) {
    @return percentage($index / _pathfinder(layout, grid-columns));
}

@function utility-value($value) {
    @if _feature(important-utils) {
        @return $value !important;
    }
    
    @return $value;
}


//  Parsed and aliased $settings variables
//  namespacing
$_element:                  _pathfinder(namespacing, delimiters, element);
 $element:                  $_element !default;
$_modifier:                 _pathfinder(namespacing, delimiters, modifier);
 $modifier:                 $_modifier !default;
$_responsive:               _pathfinder(namespacing, delimiters, responsive);
 $responsive:               $_responsive !default;

//  typography
$_browser-context:          _pathfinder(typography, browser-context);
 $browser-context:          $_browser-context !default;
$_font-faces:               map-keys(_pathfinder(typography, font-faces));
 //$font-faces:               $_font-faces !default;
$_font-family:              _pathfinder(typography, font-family);
 $font-family:              $_font-family !default;
$_line-height:              _pathfinder(typography, line-height);
 $line-height:              $_line-height !default;
$_hx-i:                     _pathfinder(typography, heading-scale-ratio);
$_heading-scales: (
    h1:                     1em + ($_hx-i * 5),
    h2:                     1em + ($_hx-i * 4),
    h3:                     1em + ($_hx-i * 3),
    h4:                     1em + ($_hx-i * 2),
    h5:                     1em + ($_hx-i * 1),
    h6:                     1em + ($_hx-i * 0),
);

//  layout
$_gutter: if(               _feature(type-based-grid),
                            ($_line-height + 0em),
                            _pathfinder(layout, gutter)
);
 $gutter:                   $_gutter !default;
//  layout, grid
$_grid-columns:             _pathfinder(layout, grid-columns);
 $grid-columns:             $_grid-columns !default;
//  layout, breakpoints
$_breakpoints:              map-keys(_pathfinder(layout, breakpoints));
 $breakpoints:              $_breakpoints !default;
$_class-breakpoints:        remove($_breakpoints, nth($_breakpoints, _pathfinder(layout, class-breakpoints) + 1), comma);
 $class-breakpoints:        $_class-breakpoints !default;

